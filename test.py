# 1. Creating Our First Game Windowimport pygamefrom pygame import mixerimport randomimport math# Initialize the pygame (always type in this line of code when you want to code a new gamepygame.init()# Create the screenscreen = pygame.display.set_mode((800, 600))# Backgroundbackground = pygame.image.load('background.png')# Background Soundmixer.music.load('background.mp3')mixer.music.play(-1)# Caption and  Iconpygame.display.set_caption("TiKi Invaders")icon = pygame.image.load('app_icon.png')pygame.display.set_icon(icon)# PlayerplayerImg = pygame.image.load('player.png')playerX = 400playerY = 480playerX_change = 0playerY_change = 0# EnemyenemyImg = []enemyX = []enemyY = []enemyX_change = []enemyY_change = []num_of_enemies = 6for i in range(num_of_enemies):    enemyImg.append(pygame.image.load('enemy.png'))    enemyX.append(random.randint(0, 800))    enemyY.append(random.randint(0, 150))    enemyX_change.append(30)    enemyY_change.append(4)# Bullet# Ready - you can't see the bullet on the screen# Fire - the bullet is currently movingbulletImg = pygame.image.load('bullet.png')bulletX = 0bulletY = 480bulletX_change = 0bulletY_change = 30bullet_state = "ready"# Scorescore_value = 0font = pygame.font.Font('freesansbold.ttf', 32)your_font = pygame.font.Font('freesansbold.ttf', 40)textX = 10textY = 10# Game Over TextXover_font = pygame.font.Font('freesansbold.ttf', 70)# High Scorehigh_font = pygame.font.Font("freesansbold.ttf", 32)h_score = 1000highX = 10highY = 50def high_score(x, y, h_score):    high_text = high_font.render("HIGH SCORE :  " + str(h_score), True, (0, 255, 0))    screen.blit(high_text, (x, y))    if score_value >= h_score:       h_score = score_valuedef show_score(x, y):    score = font.render("SCORE : " + str(score_value), True, (255, 255, 255))    screen.blit(score, (x, y))def game_over_text():    over_text = over_font.render("GAME OVER", True, (230, 10, 10))    score = your_font.render("YOUR SCORE : " + str(score_value), True, (0, 255, 255))    screen.blit(over_text, (200, 250))    screen.blit(score, (260, 320))def player(x, y):    screen.blit(playerImg, (x, y))def enemy(x, y, i):    screen.blit(enemyImg[i], (x, y))def fire_bullet(x, y):    global bullet_state    bullet_state = 'fire'    screen.blit(bulletImg, (x + 28, y + 1))def iscollision(enemyX, enemyY, bulletX, bulletY):    distance = math.sqrt((math.pow(enemyX - bulletX, 2)) + (math.pow(enemyY - bulletY, 2)))    if distance < 27:        return True    else:        return Falsedef iscollision1(enemyX, enemyY, playerX, playerY):    distance = math.sqrt((math.pow(enemyX - playerX, 2)) + (math.pow(enemyY - playerY, 2)))    if distance < 27:        return True    else:        return False# Game Looprunning = Truewhile running:    # RGB = Red, Green, Blue    screen.fill((255, 255, 255))    # Background image    screen.blit(background, (0, 0))    for event in pygame.event.get():        if event.type == pygame.QUIT:            running = False        # If keystroke is pressed check whether its right or left, up or down (Game Control)        if event.type == pygame.KEYDOWN:            if event.key == pygame.K_LEFT:                playerX_change = -15            if event.key == pygame.K_RIGHT:                playerX_change = 15            if event.key == pygame.K_UP:                playerY_change = -15            if event.key == pygame.K_DOWN:                playerY_change = 15            if event.key == pygame.K_SPACE:                bullet_sound = mixer.Sound('laser.wav')                bullet_sound.play()                # Get the current x cordinate of the spaceship                if bullet_state == "ready":                    bulletX = playerX                    bulletY = playerY                    fire_bullet(bulletX, bulletY)        if event.type == pygame.KEYUP:            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT or event.key == pygame.K_UP or event.key == pygame.K_DOWN:                playerX_change = 0.0                playerY_change = 0.0    playerY += playerY_change    if playerY <= 0:  # Checking for boundaries  for Player, so it doesn't go outside the screen        playerY = 0    elif playerY >= 540:        playerY = 540            playerX += playerX_change  # Player Movement    if playerX <= 0:  # Checking for boundaries  for Player, so it doesn't go outside the screen        playerX = 0    elif playerX >= 740:        playerX = 740    for i in range(num_of_enemies):        # Game Over        if enemyY[i] > 440:            for j in range(num_of_enemies):                enemyY[j] = 2000            game_over_text()            break        enemyX[i] += enemyX_change[i]  # Enemy Movement        if enemyX[i] <= 0:  # Checking for boundaries  for Enemy, so it doesn't go outside the screen            enemyX_change[i] = 6.5            enemyY[i] += enemyY_change[i]        elif enemyX[i] >= 740:            enemyX_change[i] = - 6.5            enemyY[i] += enemyY_change[i]        # Collision        collision = iscollision(enemyX[i], enemyY[i], bulletX, bulletY)        if collision:            collision_sound = mixer.Sound('explosion.wav')            collision_sound.play()            bulletY = playerY            bullet_state = "ready"            score_value += 1            enemyX[i] = random.randint(0, 800)            enemyY[i] = random.randint(0, 150)        enemy(enemyX[i], enemyY[i], i)        collision1 = iscollision1(enemyX[i], enemyY[i], playerX, playerY)        if collision1:            collision_sound = mixer.Sound('explosion.wav')            collision_sound.play()            bulletY = playerY            bullet_state = "ready"            score_value += 1            enemyX[i] = random.randint(0, 800)            enemyY[i] = random.randint(0, 150)        enemy(enemyX[i], enemyY[i], i)    # Bullet Movement    if bullet_state == "fire":        fire_bullet(bulletX, bulletY)        bulletY -= bulletY_change    if bulletY <= 0:        bulletY = playerY        bullet_state = "ready"    player(playerX, playerY)    high_score(highX, highY, h_score)    show_score(textX, textY)    pygame.display.update()